{
  "_args": [
    [
      "mensch@github:brettstimmerman/mensch#v0.3.3",
      "/Users/mneterval/Desktop/newsletter-email-template/node_modules/juice"
    ]
  ],
  "_from": "brettstimmerman/mensch#v0.3.3",
  "_id": "mensch@0.3.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/mensch",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/brettstimmerman/mensch/v0.3.3/package.json",
      "gitUrl": "git://github.com/brettstimmerman/mensch.git#v0.3.3",
      "httpsUrl": "git+https://github.com/brettstimmerman/mensch.git#v0.3.3",
      "shortcut": "github:brettstimmerman/mensch#v0.3.3",
      "ssh": "git@github.com:brettstimmerman/mensch.git#v0.3.3",
      "sshUrl": "git+ssh://git@github.com/brettstimmerman/mensch.git#v0.3.3",
      "type": "github"
    },
    "name": "mensch",
    "raw": "mensch@github:brettstimmerman/mensch#v0.3.3",
    "rawSpec": "github:brettstimmerman/mensch#v0.3.3",
    "scope": null,
    "spec": "github:brettstimmerman/mensch#v0.3.3",
    "type": "hosted"
  },
  "_requiredBy": [
    "/juice"
  ],
  "_resolved": "git://github.com/brettstimmerman/mensch.git#3c9cc0104984ccbbb6a27255ff36b9934f42e868",
  "_shasum": "601e16de8bbd030ef97d29b9504142d858213528",
  "_shrinkwrap": null,
  "_spec": "mensch@github:brettstimmerman/mensch#v0.3.3",
  "_where": "/Users/mneterval/Desktop/newsletter-email-template/node_modules/juice",
  "author": {
    "email": "brettstimmerman@gmail.com",
    "name": "Brett Stimmerman"
  },
  "bugs": {
    "url": "https://github.com/brettstimmerman/mensch/issues"
  },
  "dependencies": {},
  "description": "A decent CSS parser",
  "devDependencies": {
    "jshint": "*",
    "mocha": "*"
  },
  "gitHead": "3c9cc0104984ccbbb6a27255ff36b9934f42e868",
  "homepage": "https://github.com/brettstimmerman/mensch",
  "keywords": [
    "css",
    "parser",
    "parsing",
    "stylesheet"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mensch",
  "optionalDependencies": {},
  "readme": "# mensch [![Build Status](https://secure.travis-ci.org/brettstimmerman/mensch.png?branch=master)](http://travis-ci.org/brettstimmerman/mensch)\n\nA decent CSS parser.\n\n# usage\n\n```sh\nnpm install mensch\n```\n\n```js\nvar mensch = require('mensch');\n\nvar ast = mensch.parse('p { color: black; }');\nvar css = mensch.stringify(ast);\n\nconsole.log(css);\n// => p { color: black; }\n```\n\n# api\n\n## parse(css, [options={}])\n\nConvert a CSS string or an array of lexical tokens into a `stringify`-able AST.\n\n- `css` {String|Array} CSS string or array of lexical tokens\n- `[options]` {Object}\n- `[options.comments=false]` {Boolean} Allow comment nodes in the AST.\n- `[options.position=false]` {Boolean} Allow line/column position in the AST.\n\nWhen `{position: true}`, AST node will have a `position` property:\n\n```js\n{\n  type: 'comment',\n  text: ' Hello World! ',\n  position: {\n    start: { line: 1, col: 1 },\n    end: { line 1, col: 18 }\n  }\n}\n```\n\n## stringify(ast, [options={}])\n\nConvert a `stringify`-able AST into a CSS string.\n\n- `ast` {Object} A `stringify`-able AST\n- `[options]` {Object}\n- `[options.comments=false]` {Boolean} Allow comments in the stringified CSS.\n- `[options.indentation='']` {String} E.g., `indentation: '  '` will indent by\n    two spaces.\n\n## lex(css)\n\nConvert a CSS string to an array of lexical tokens for use with `.parse()`.\n\n- `css` {String} CSS\n\n# non-validating\n\nMensch is a non-validating CSS parser. While it can handle the major language\nconstructs just fine, and it can recover from gaffes like mis-matched braces and\nmissing or extraneous semi-colons, mensch can't tell you when it finds\ninvalid CSS like a misspelled property name or a misplaced `@import`.\n\n# comments\n\nUnlike most CSS parsers, mensch allows comments to be represented in the AST and\nsubsequently stringified with the `{comments: true}` option.\n\n```js\nvar options = { comments: true };\n```\n\n```js\nvar ast = mensch.parse('.red { color: red; /* Natch. */ }', options);\nvar css = mensch.stringify(ast, options);\n\nconsole.log(css);\n//=> .red { color: red; /* Natch. */ }\n```\n\nHowever, comments within the context of a selector, property, etc., will be\nignored. These comments are difficult to represent in the AST.\n\n```js\nvar ast = mench.parse('.red /*1*/ { color /*2*/: /*3*/ red /*4*/; }', options);\nvar css = mesch.stringify(ast, options);\n\nconsole.log(css);\n//=> .red { color: red; }\n```\n\n# ast\n\nThe structure of mensch's AST riffs on several existing CSS parsers, but it\nmight not be 100% compatible with other CSS parsers. Here it is in a nutshell:\n\n```js\n{\n  type: 'stylesheet'\n  stylesheet: {\n    rules: [{\n      type: 'rule',\n      selectors: ['.foo'],\n      declarations: [{\n        type: 'property',\n        name: 'color',\n        value: 'black'\n      }]\n    }]\n  }\n}\n```\n\n# credits\n\nMensch is based on several existing CSS parsers, but\n[nzakas/parser-lib](https://github.com/nzakas/parser-lib) and\n[visionmedia/css](https://github.com/visionmedia/css) are notable influences.\n\n# known users\n\n[voidlabs/mosaico](https://github.com/voidlabs/mosaico) uses Mensch parser to parse custom-flavored CSS rules in email templates and make the template editable: positions, comment parsing, multiple declarations for the same property have been keys to the choice of Mensch!\n\nPlease let us know if you use Mensch in your library!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/brettstimmerman/mensch.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.3.3"
}
